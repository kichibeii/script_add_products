// Code generated by MockGen. DO NOT EDIT.
// Source: server/domain/thirdparties/thirdparty.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	thirdparties "github.com/script_add_products/server/domain/thirdparties"
)

// MockIThirdParty is a mock of IThirdParty interface.
type MockIThirdParty struct {
	ctrl     *gomock.Controller
	recorder *MockIThirdPartyMockRecorder
}

// MockIThirdPartyMockRecorder is the mock recorder for MockIThirdParty.
type MockIThirdPartyMockRecorder struct {
	mock *MockIThirdParty
}

// NewMockIThirdParty creates a new mock instance.
func NewMockIThirdParty(ctrl *gomock.Controller) *MockIThirdParty {
	mock := &MockIThirdParty{ctrl: ctrl}
	mock.recorder = &MockIThirdPartyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIThirdParty) EXPECT() *MockIThirdPartyMockRecorder {
	return m.recorder
}

// CreateBulk mocks base method.
func (m *MockIThirdParty) CreateBulk(ctx context.Context, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulk", ctx, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBulk indicates an expected call of CreateBulk.
func (mr *MockIThirdPartyMockRecorder) CreateBulk(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulk", reflect.TypeOf((*MockIThirdParty)(nil).CreateBulk), ctx, filePath)
}

// StagedUploadCreate mocks base method.
func (m *MockIThirdParty) StagedUploadCreate(ctx context.Context) (thirdparties.StagedTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StagedUploadCreate", ctx)
	ret0, _ := ret[0].(thirdparties.StagedTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StagedUploadCreate indicates an expected call of StagedUploadCreate.
func (mr *MockIThirdPartyMockRecorder) StagedUploadCreate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StagedUploadCreate", reflect.TypeOf((*MockIThirdParty)(nil).StagedUploadCreate), ctx)
}

// UploadFileJsonl mocks base method.
func (m *MockIThirdParty) UploadFileJsonl(ctx context.Context, data thirdparties.StagedTarget, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileJsonl", ctx, data, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFileJsonl indicates an expected call of UploadFileJsonl.
func (mr *MockIThirdPartyMockRecorder) UploadFileJsonl(ctx, data, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileJsonl", reflect.TypeOf((*MockIThirdParty)(nil).UploadFileJsonl), ctx, data, filePath)
}

// Webhook mocks base method.
func (m *MockIThirdParty) Webhook(ctx context.Context) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Webhook", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Webhook indicates an expected call of Webhook.
func (mr *MockIThirdPartyMockRecorder) Webhook(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Webhook", reflect.TypeOf((*MockIThirdParty)(nil).Webhook), ctx)
}
